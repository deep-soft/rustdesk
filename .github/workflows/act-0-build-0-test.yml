# 2023-05-21 19:30
#
#
name: act - Build - test - pre

on:
  workflow_call:
  workflow_dispatch:
#  schedule:
#    # schedule build every night
#    - cron: "0 0 * * *"

env:
  TAG_VERSION: "rdsk-v1.2.0"
  TAG_BUILD: "-b"
  TAG_REVISION: "0000"
  TAG_NAME: "z-test-cstm"
  # To make a custom build with your own servers set the below secret values
  RS_PUB_KEY: '${{ secrets.RS_PUB_KEY }}'
  RENDEZVOUS_SERVER: '${{ secrets.RENDEZVOUS_SERVER }}'
  RDSK_PCH_SH_PRE: '${{ secrets.RDSK_PCH_SH_PRE }}'
  RDSK_PCH_SH: '${{ secrets.RDSK_PCH_SH }}'
  RDSK_PCH_HL: '${{ secrets.RDSK_PCH_HL }}'
  RDSK_PCH_SH2: '${{ secrets.RDSK_PCH_SH2 }}'
  RDSK_PCH_SH_CLN: '${{ secrets.RDSK_PCH_SH_CLN }}'
  DEBUG_LS: "yes"
  LLVM_VERSION: "15.0.6"
  FLUTTER_VERSION: "3.7.0"
  # vcpkg version: 2023.04.15
  # for multiarch gcc compatibility
  VCPKG_COMMIT_ID: "501db0f17ef6df184fcdbfbe0f87cde2313b6ab1"
  VERSION: "1.2.0"
  NDK_VERSION: "r23"
  #signing keys env variable checks
  ANDROID_SIGNING_KEY: '${{ secrets.ANDROID_SIGNING_KEY }}'
  #  signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
  #  alias: ${{ secrets.ANDROID_ALIAS }}
  #  keyStorePassword: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
  #  keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}  
  MACOS_P12_BASE64: '${{ secrets.MACOS_P12_BASE64 }}'

jobs:
  test-patch:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { arch: x86_64  , target: x86_64-pc-windows-msvc        , os: windows-2022  , extra-build-features: ""                                                         }
          - { arch: x86_64  , target: i686-pc-windows-msvc          , os: windows-2022  , extra-build-features: ""                                                         }
          - { arch: x86_64  , target: x86_64-apple-darwin           , os: macos-latest  , extra-build-features: ""                                                         }
          - { arch: x86_64  , target: x86_64-unknown-linux-gnu      , os: ubuntu-20.04  , extra-build-features: ""                                                         }
          - { arch: x86_64  , target: x86_64-unknown-linux-gnu      , os: ubuntu-20.04  , extra-build-features: "flatpak"                                                  }
          - { arch: x86_64  , target: x86_64-unknown-linux-gnu      , os: ubuntu-20.04  , extra-build-features: "appimage"                                                 }
          - { arch: x86_64  , target: aarch64-linux-android         , os: ubuntu-20.04  , extra-build-features: ""                           , openssl-arch: android-arm64 }
          - { arch: x86_64  , target: armv7-linux-androideabi       , os: ubuntu-20.04  , extra-build-features: ""                           , openssl-arch: android-arm   }
          - { arch: aarch64 , target: aarch64-unknown-linux-gnu     , os: ubuntu-20.04  , extra-build-features: ""         , use-cross: true                               }
          - { arch: aarch64 , target: aarch64-unknown-linux-gnu     , os: ubuntu-20.04  , extra-build-features: "appimage" , use-cross: true                               }
          - { arch: armv7   , target: armv7-unknown-linux-gnueabihf , os: ubuntu-latest , extra-build-features: ""         , use-cross: true , deb-arch: armhf             }

    steps:
      - name: Checkout source code
        uses: deep-soft/checkout@v3

      - name: Get revision, set build version
        shell: bash
        run: |
          echo "before git rev"
          git -C . rev-list --count HEAD
          echo "after git rev"
          _revision_=$(git -C . rev-list --count HEAD)
          echo "TAG_REVISION=$_revision_" >> $GITHUB_ENV
          _build_=${{ env.TAG_BUILD }}.$_revision_
          echo "TAG_BUILD=$_build_" >> $GITHUB_ENV

      - name: Print revision, build version
        shell: bash
        run: |
          echo "REV: ${{ env.TAG_REVISION }}
          echo "BLD: ${{ env.TAG_BUILD }}

      - name: Create source archive
        continue-on-error: false
        shell: bash
        run: |
          staging="rdsk-src-${{ env.VERSION }}-${{ matrix.job.target }}-${{ matrix.job.extra-build-features }}-${{ env.GUI }}"
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            7z a "$staging.zip" "*" -x!target/* -x!vcpkg/* > nul
            echo "ASSET_SRC=$staging.zip" >> $GITHUB_ENV
            if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
              echo "source archive name:"
              ls -l "$staging.zip"
            fi
          else
            touch "$staging.tar.xz"
            #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
            tar --exclude=*.tar* --exclude=target/*  --exclude=vcpkg/* -cv . | xz -9 > "$staging.tar.xz"
            echo "ASSET_SRC=$staging.tar.xz" >> $GITHUB_ENV
            if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
              echo "source archive name: "
              ls -l "$staging.tar.xz"
            fi
          fi
          #ls -l ${{ env.ASSET_SRC }} 

      - name: Prepare for patch 1
        continue-on-error: false
        shell: bash
        run: |
          echo "$RDSK_PCH_SH_PRE" | base64 --decode > ./RDSK_PCH_SH_PRE.sh
          echo "$RDSK_PCH_SH" | base64 --decode > ./RDSK_PCH_SH.sh
          echo "$RDSK_PCH_HL" | base64 --decode > ./RDSK_PTCH_HL.txt
          echo prepatch 1 run
          bash ./RDSK_PCH_SH_PRE.sh
          echo Done prepatch 1
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            pwd
          fi

      - name: Apply patch 1
        continue-on-error: false
        shell: bash
        env: 
          SED_EXE: ${{ env.SED_EXE }}
        run: |
          echo patch 1 run_1
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_2
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_3
          bash ./RDSK_PCH_SH.sh
          echo Done patch 1
          #cat ./libs/hbb_common/src/config.rs

      - name: Prepare for patch 2
        continue-on-error: false
        shell: bash
        run: |
          echo "$RDSK_PCH_SH2" | base64 --decode > ./RDSK_PCH_SH2.sh
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            pwd
          fi

      - name: Apply patch 2
        continue-on-error: false
        shell: bash
        run: |
          echo patch 2
          bash ./RDSK_PCH_SH2.sh
          echo Done patch 2
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            pwd
          fi

      - name: Apply patch 3
        continue-on-error: false
        shell: bash
        run: |
          echo patch 3

          case ${{ matrix.job.os }} in
            windows-2022)
              ./packfolder-windows.exe src/ui/ src/archived.rc -binary
            ;;
            macos-latest)
              chmod +x ./packfolder-macosx
              ./packfolder-macosx      src/ui/ src/archived.rc -binary
            ;;
            ubuntu-20.04)
              chmod +x ./packfolder-linux
              ./packfolder-linux       src/ui/ src/archived.rc -binary
            ;;
            ubuntu-latest)
              chmod +x ./packfolder-linux
              ./packfolder-linux       src/ui/ src/archived.rc -binary
            ;;
          esac

          echo Done patch 3
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l src
            pwd
          fi

#      - name: Cleanup after patch
#        continue-on-error: false
#        shell: bash
#        run: |
#          echo "$RDSK_PCH_SH_CLN" | base64 --decode > ./RDSK_PCH_SH_CLN.sh
#          bash ./RDSK_PCH_SH_CLN.sh

      - name: Create source archive 1
        continue-on-error: false
        shell: bash
        run: |
          staging="rdsk-src1-${{ env.VERSION }}-${{ matrix.job.target }}-${{ matrix.job.extra-build-features }}-${{ env.GUI }}"
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            7z a "$staging.zip" "*" -x!target/* -x!vcpkg/* > nul
            echo "ASSET_SRC1=$staging.zip" >> $GITHUB_ENV
            if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
              echo "source archive name:"
              ls -l "$staging.zip"
            fi
          else
            touch "$staging.tar.xz"
            #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
            tar --exclude=*.tar* --exclude=target/*  --exclude=vcpkg/* -cv . | xz -9 > "$staging.tar.xz"
            echo "ASSET_SRC1=$staging.tar.xz" >> $GITHUB_ENV
            if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
              echo "source archive name: "
              ls -l "$staging.tar.xz"
            fi
          fi
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            ls -l ${{ env.ASSET_SRC }} 
            ls -l ${{ env.ASSET_SRC1 }} 
          fi

      - name: Publish src archives
        continue-on-error: false
        uses: deep-soft/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ${{ env.ASSET_SRC }}
            ${{ env.ASSET_SRC1 }}
