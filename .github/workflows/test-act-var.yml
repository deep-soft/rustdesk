# 2023-10-16 08:00
# changed: Install Rust toolchain. uses: deep-soft/rust-toolchain@master
# git config --global core.longpaths true
# windows-2019
name: test - act - Flutter - Win - cstm

env:
  TAG_NAME:      "Win-cstm"
  TAG_VERSION:   "rdsk-v1.2.1"
  TAG_BUILD:     "-b"
  TAG_REF:       "0000000"
  PROG_NAME:     "rdsk"
  PROG_VERSION:  "v1.0.0"
  VERSION:       "1.0.0"
  DEBUG_LS:      "yes"
  # To make a custom build with your own servers set the below secret values
  RS_PUB_KEY:        '${{ secrets.RS_PUB_KEY }}'
  RENDEZVOUS_SERVER: '${{ secrets.RENDEZVOUS_SERVER }}'
  RDSK_PCH_SH_PRE:   '${{ secrets.RDSK_PCH_SH_PRE }}'
  RDSK_PCH_SH:       '${{ secrets.RDSK_PCH_SH }}'
  RDSK_PCH_HL:       '${{ secrets.RDSK_PCH_HL }}'
  RDSK_PCH_SH2:      '${{ secrets.RDSK_PCH_SH2 }}'
  RDSK_PCH_SH4:      '${{ secrets.RDSK_PCH_SH4 }}'
  RDSK_PCH_SH_CLN:   '${{ secrets.RDSK_PCH_SH_CLN }}'
  RUST_VERSION:                "rust-1.70.0"
  LLVM_VERSION:                "15.0.6"
  FLUTTER_VERSION:             "3.10.6"
  FLUTTER_RUST_BRIDGE_VERSION: "1.75.3"
  FLUTTER_ELINUX_VERSION:      "3.10.6"
  FLUTTER_ELINUX_COMMIT_ID:    "410b3ca42f2cd0c485edf517a1666652bab442d4"
  VCPKG_COMMIT_ID:             "662dbb50e63af15baa2909b7eac5b1b87e86a0aa"
  CARGO_NDK_VERSION:           "3.1.2"
  NDK_VERSION:                 "r25c"
  #signing keys env variable checks
  ANDROID_SIGNING_KEY: '${{ secrets.ANDROID_SIGNING_KEY }}'
  #  signingKeyBase64: '${{ secrets.ANDROID_SIGNING_KEY }}'
  #  alias:            '${{ secrets.ANDROID_ALIAS }}'
  #  keyStorePassword: '${{ secrets.ANDROID_KEY_STORE_PASSWORD }}'
  #  keyPassword:      '${{ secrets.ANDROID_KEY_PASSWORD }}'
  MACOS_P12_BASE64:    '${{ secrets.MACOS_P12_BASE64 }}'
  cargo_clippy_log:    "cargo-clippy.log"
  GUI: "Windows"

on:
#  schedule:
#    # schedule build every night
#    - cron: "0 0 * * *"
  workflow_call:
  workflow_dispatch:
    inputs:
      archive_ALL:
        description: Archive ALL
        type: boolean
        default: false
        required: true

jobs:
  build-for-windows:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
#         - { target: i686-pc-windows-msvc        , os: windows-2022 }
#         - { target: x86_64-pc-windows-gnu       , os: windows-2022 }
          - { target: x86_64-pc-windows-msvc      , os: windows-2019 }
          - { target: x86_64-pc-windows-msvc      , os: windows-2022 }
    steps:
      - name: Checkout source code
        uses: deep-soft/checkout@v3

## -- read from toml - begin
      - name: Read toml package.version
        uses: deep-soft/toml-action@v1.0.2
        id: read_toml_version
        with:
          file: 'Cargo.toml'
          field: 'package.version'

      - name: Set env.PROG_VERSION
        shell: bash
        run: |
          echo "PROG_VERSION = ${{ env.PROG_VERSION }}"

          echo "set PROG_VERSION with value from Cargo.toml"
          _version_=${{ steps.read_toml_version.outputs.value }}
          prog_version="v"$_version_

          echo "PROG_VERSION = $prog_version"
          echo "TAG_VERSION=${{ env.PROG_NAME }}-$prog_version"

          echo "set env.PROG_VERSION with value from Cargo.toml"
          echo "PROG_VERSION=$prog_version" >> $GITHUB_ENV
          echo "VERSION=$_version_" >> $GITHUB_ENV
          echo "TAG_VERSION=${{ env.PROG_NAME }}-$prog_version" >> $GITHUB_ENV

      - name: Print env.PROG_VERSION
        shell: bash
        run: |
          echo "show new value for env.PROG_VERSION"
          echo "PROG_VERSION = ${{ env.PROG_VERSION }}"
          echo "TAG_VERSION  = ${{ env.TAG_VERSION  }}"

## -- read from toml - end

# - get ref set build begin
      - name: Get ref, set build version
        shell: bash
        run: |
          _ref_all_=$(git log -1 --format='%H')
          # _ref_=$(echo ${_ref_all_::7})
          _date_=$(date +%Y%m%d)
          _ref_org_=${{ env.TAG_REF }}
          _ref_len_="${#_ref_org_}"
          _ref_=$(echo ${_ref_all_::$_ref_len_})
          echo "TAG_REF=$_ref_" >> $GITHUB_ENV
          _build_=${{ env.TAG_BUILD }}-$_date_-$_ref_
          echo "TAG_BUILD=$_build_" >> $GITHUB_ENV
          echo "WORK_DIR=$(pwd)" >> $GITHUB_ENV
          echo "TAG_DATE=$_date_" >> $GITHUB_ENV

      - name: Print ref, build version
        shell: bash
        run: |
          echo "REF: ${{ env.TAG_REF }}
          echo "BLD: ${{ env.TAG_BUILD }}
          echo "${{ env.TAG_NAME }}-${{ env.TAG_BUILD }}" > _tag_name_.txt

      - name: Create source archive
        continue-on-error: true
        shell: bash
        run: |
          staging="rdsk-src-${{ env.VERSION }}-${{ matrix.job.target }}-${{ matrix.job.extra-build-features }}-${{ env.GUI }}-${{ matrix.job.os }}"
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            7z a "$staging.zip" "*" -x!target/* -x!vcpkg/* > nul
            echo "ASSET_SRC=$staging.zip" >> $GITHUB_ENV
            if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
              echo "source archive name:"
              ls -l "$staging.zip"
            fi
          else
            touch "$staging.tar.xz"
            #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
            tar --exclude=*.tar* --exclude=target/*  --exclude=vcpkg/* -cv . | xz -9 > "$staging.tar.xz"
            echo "ASSET_SRC=$staging.tar.xz" >> $GITHUB_ENV
            if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
              echo "source archive name: "
              ls -l "$staging.tar.xz"
            fi
          fi
          #ls -l ${{ env.ASSET_SRC }} 

      - name: Prepare for patch 1
        continue-on-error: false
        shell: bash
        run: |
          echo "$RDSK_PCH_SH_PRE" | base64 --decode > ./RDSK_PCH_SH_PRE.sh
          echo "$RDSK_PCH_SH" | base64 --decode > ./RDSK_PCH_SH.sh
          echo "$RDSK_PCH_HL" | base64 --decode > ./RDSK_PTCH_HL.txt
          echo prepatch 1 run
          bash ./RDSK_PCH_SH_PRE.sh
          echo Done prepatch 1
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            pwd
          fi

      - name: Apply patch 1
        # continue-on-error: true
        shell: bash
        env: 
          SED_EXE: ${{ env.SED_EXE }}
        run: |
          echo patch 1 run_1
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_2
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_3
          bash ./RDSK_PCH_SH.sh
          echo Done patch 1
          #cat ./libs/hbb_common/src/config.rs

      - name: Prepare for patch 2
        continue-on-error: true
        shell: bash
        run: |
          echo "$RDSK_PCH_SH2" | base64 --decode > ./RDSK_PCH_SH2.sh
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            pwd
          fi

      - name: Apply patch 2
        # continue-on-error: true
        shell: bash
        run: |
          echo patch 2
          bash ./RDSK_PCH_SH2.sh
          echo Done patch 2
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            pwd
          fi

      - name: Apply patch 3
        # continue-on-error: true
        shell: bash
        run: |
          echo patch 3
          ./packfolder-windows.exe src/ui/ src/archived.rc -binary
          echo Done patch 3
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l src
            pwd
          fi

      - name: Apply patch 4
        # continue-on-error: true
        shell: bash
        run: |
          echo patch 4
          rm ./RDSK_PCH_SH2.sh; op_result=$?
          echo "$RDSK_PCH_SH4" | base64 --decode > ./RDSK_PCH_SH2.sh
          cat ./RDSK_PCH_SH2.sh
          bash ./RDSK_PCH_SH2.sh
          echo Done patch 4
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            pwd
          fi

      - name: Add version information for self-extract
        continue-on-error: true
        shell: bash
        run: |
          # sed -i 's|}|    embed_resource::compile("../../flutter/windows/runner/Runner.rc", embed_resource::NONE);\n}|' ./libs/portable/build.rs
          # sed -i 's|embed_resource::compile("icon.rc", embed_resource::NONE);|embed_resource::compile("../../flutter/windows/runner/Runner.rc", embed_resource::NONE);|' ./libs/portable/build.rs;
          # sed -i 's|"icon.rc"|"../../flutter/windows/runner/Runner.rc"|' ./libs/portable/build.rs;
          # sed -i 's|embed_resource::compile("icon.rc", embed_resource::NONE);|println!("cargo:rustc-link-lib=dylib:+verbatim=../../flutter/build/windows/runner/rustdesk.dir/Release/Runner.res");|' ./libs/portable/build.rs;
          # sed -i 's|embed_resource::compile("icon.rc", embed_resource::NONE);|println!("cargo:rustc-link-lib=dylib:+verbatim=./flutter/build/windows/runner/rustdesk.dir/Release/Runner.res");|' ./libs/portable/build.rs;
          sed -i 's|embed_resource::compile("icon.rc", embed_resource::NONE);|println!("cargo:rustc-link-lib=dylib:+verbatim=./Runner.res");|' ./libs/portable/build.rs;

      - name: print build.rs
        continue-on-error: true
        shell: bash
        run: |
          cat ./libs/portable/build.rs

      - name: Search runner.res
        continue-on-error: true
        shell: bash
        run: |
          runner_res=$(find . -name "Runner.res")
          if [ "$runner_res" != "" ]; then
            echo "0: Runner.res: $runner_res"
            cp $runner_res ./Runner.res
            cp $runner_res ./libs/portable/Runner.res
          fi
          runner_rc=$(find . -name "Runner.rc")
          if [ "$runner_rc" != "" ]; then
            echo "0: Runner.rc: $runner_rc"
            cp $runner_rc ./Runner.rc
            cp $runner_rc ./libs/portable/Runner.rc
          fi

      - name: change year in Copyright, 2022 to 2023
        continue-on-error: true
        shell: bash
        run: |
          sed -i 's|Copyright (C) 2022 com.carriez.|Copyright (C) 2023 com.carriez.|' ./flutter/windows/runner/Runner.rc;

      - name: print Runner.rc
        continue-on-error: true
        shell: bash
        run: |
          cat ./flutter/windows/runner/Runner.rc

      - name: Cleanup after patch
        continue-on-error: true
        shell: bash
        run: |
          echo "$RDSK_PCH_SH_CLN" | base64 --decode > ./RDSK_PCH_SH_CLN.sh
          bash ./RDSK_PCH_SH_CLN.sh
