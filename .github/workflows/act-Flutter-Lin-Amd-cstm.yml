# act-Flutter-Lin-Amd-cstm.yml
# 2024-12-21 09:00
# flutter 3.24.5, generate_bridge on linux
# progversion, no IDD, 
# changed: Replace engine with rustdesk custom flutter engine - default true (for win7)
# changed: Install Rust toolchain. uses: deep-soft/rust-toolchain@master
# windows-2022, sed-stuff, sha256 for self-extract
# runner.rc, change ProductVersion, Copyright 2024, vcpkg
name: act - Flutter - Lin-Amd - cstm

env:
  GUI:                         'Linux'
  TAG_NAME:                    "Lin-cstm"
  TAG_VERSION:                 "rdsk-v1.2.1"
  TAG_BUILD:                   "-b"
  TAG_REF:                     "0000000"
  PROG_NAME:                   "rdsk"
  PROG_VERSION:                "v1.0.0"
  VERSION:                     "1.0.0"
  DEBUG_LS:                    "yes"
  # To make a custom build with your own servers set the below secret values
  RS_PUB_KEY:                  '${{ secrets.RS_PUB_KEY        }}'
  RENDEZVOUS_SERVER:           '${{ secrets.RENDEZVOUS_SERVER }}'
  API_SERVER:                  '${{ secrets.API_SERVER        }}'
  RDSK_PCH_SH_PRE:             '${{ secrets.RDSK_PCH_SH_PRE   }}'
  RDSK_PCH_SH:                 '${{ secrets.RDSK_PCH_SH       }}'
  RDSK_PCH_HL:                 '${{ secrets.RDSK_PCH_HL       }}'
  RDSK_PCH_SH2:                '${{ secrets.RDSK_PCH_SH2      }}'
  RDSK_PCH_SH4:                '${{ secrets.RDSK_PCH_SH4      }}'
  RDSK_PCH_SH_CLN:             '${{ secrets.RDSK_PCH_SH_CLN   }}'
  RUST_VERSION:                "1.75" # was "rust-1.76.0"
  WIN_RUST_VERSION:            "1.75"
  LLVM_VERSION:                "15.0.6"
#  FLUTTER_VERSION:             "3.16.9"
#  FLUTTER_VERSION:             "3.19.6"
  BRIDGE_FLUTTER_VERSION:      "3.22.3" # flutter for bridge is "3.22.3"
  ANDROID_FLUTTER_VERSION:     "3.24.5"
  FLUTTER_VERSION:             "3.24.5" # bridge is "3.22.3"
  FLUTTER_RUST_BRIDGE_VERSION: "1.80.1"
  FLUTTER_ELINUX_VERSION:      "3.16.9"
  FLUTTER_ELINUX_COMMIT_ID:    "c02bd16e1630f5bd690b85c5c2456ac1920e25af"
  # vcpkg version: 2023.10.19
  # for multiarch gcc compatibility
  # VCPKG_COMMIT_ID:             "8eb57355a4ffb410a2e94c07b4dca2dffbee8e50"
  # vcpkg version: 2024.06.15
  # VCPKG_COMMIT_ID:             "f7423ee180c4b7f40d43402c2feb3859161ef625"
  # vcpkg version: 2024.07.12
  # VCPKG_COMMIT_ID:             "1de2026f28ead93ff1773e6e680387643e914ea1"
  # vcpkg version: 2024.11.16
  VCPKG_COMMIT_ID:             "b2cb0da531c2f1f740045bfe7c4dac59f0b2b69c"
  VCPKG_DIRECTORY:             "C:\\vcpkg"
  VCPKG_BINARY_SOURCES:        "clear;x-gha,readwrite"
  CARGO_NDK_VERSION:           "3.1.2"
  NDK_VERSION:                 "r27c" # was "r27"
  #signing keys env variable checks
  ANDROID_SIGNING_KEY:         '${{ secrets.ANDROID_SIGNING_KEY }}'
  #  signingKeyBase64:         '${{ secrets.ANDROID_SIGNING_KEY }}'
  #  alias:                    '${{ secrets.ANDROID_ALIAS }}'
  #  keyStorePassword:         '${{ secrets.ANDROID_KEY_STORE_PASSWORD }}'
  #  keyPassword:              '${{ secrets.ANDROID_KEY_PASSWORD }}'
  MACOS_P12_BASE64:            '${{ secrets.MACOS_P12_BASE64 }}'
  cargo_clippy_log:            "cargo-clippy.log"

on:
#  schedule:
#    # schedule build every night
#    - cron: "0 0 * * *"
  workflow_call:
  workflow_dispatch:
    inputs:
      other_packages:
        description: other packages (rpm, flatpack, appimage, ...)
        default: 'false'
        required: true

jobs:
  generate-bridge-linux:
    uses: ./.github/workflows/act-build-bridge.yml
    secrets: inherit

  build-rustdesk-lib-linux-amd64:
    needs: [generate-bridge-linux]
    name: build-rust-lib ${{ matrix.job.target }} (${{ matrix.job.os }}) [${{ matrix.job.extra-build-features }}]
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        # use a high level qemu-user-static
        job:
          - { arch: x86_64, target: x86_64-unknown-linux-gnu  , os: ubuntu-20.04, vcpkg-triplet: x64-linux , distro: ubuntu18.04, deb_arch: amd64 }
          
    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL',     process.env.ACTIONS_CACHE_URL     || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Maximize build space
        run: |
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet
          #sudo apt install ca-certificates -y
          sudo apt-get update -y
          sudo apt-get install -y nasm qemu-user-static yasm

      - name: Checkout source code
        uses: deep-soft/checkout@v4

## -- read from toml - begin
      - name: Read toml package.version
        uses: deep-soft/toml-action@v1.0.3
        id: read_toml_version
        with:
          file: 'Cargo.toml'
          field: 'package.version'

      - name: Set env.PROG_VERSION
        shell: bash
        run: |
          echo "PROG_VERSION = ${{ env.PROG_VERSION }}"

          echo "set PROG_VERSION with value from Cargo.toml"
          _version_=${{ steps.read_toml_version.outputs.value }}
          prog_version="v"$_version_

          echo "PROG_VERSION = $prog_version"
          echo "TAG_VERSION=${{ env.PROG_NAME }}-$prog_version"

          echo "set env.PROG_VERSION with value from Cargo.toml"
          echo "PROG_VERSION=$prog_version" >> $GITHUB_ENV
          echo "VERSION=$_version_" >> $GITHUB_ENV
          echo "TAG_VERSION=${{ env.PROG_NAME }}-$prog_version" >> $GITHUB_ENV

      - name: Print env.PROG_VERSION
        shell: bash
        run: |
          echo "show new value for env.PROG_VERSION"
          echo "PROG_VERSION = ${{ env.PROG_VERSION }}"
          echo "TAG_VERSION  = ${{ env.TAG_VERSION  }}"

## -- read from toml - end

# - get ref set build begin
      - name: Get ref, set build version
        shell: bash
        run: |
          _ref_all_=$(git log -1 --format='%H')
          # _ref_=$(echo ${_ref_all_::7})
          _date_=$(date +%Y%m%d)
          _ref_org_=${{ env.TAG_REF }}
          _ref_len_="${#_ref_org_}"
          _ref_=$(echo ${_ref_all_::$_ref_len_})
          echo "TAG_REF=$_ref_" >> $GITHUB_ENV
          _build_=${{ env.TAG_BUILD }}-$_date_-$_ref_
          echo "TAG_BUILD=$_build_" >> $GITHUB_ENV
          echo "WORK_DIR=$(pwd)" >> $GITHUB_ENV
          echo "TAG_DATE=$_date_" >> $GITHUB_ENV

      - name: Print ref, build version
        shell: bash
        run: |
          echo "REF: ${{ env.TAG_REF }}
          echo "BLD: ${{ env.TAG_BUILD }}
          echo "${{ env.TAG_NAME }}-${{ env.TAG_BUILD }}" > _tag_name_.txt
# - get ref set build end

      - name: Prepare for patch 1
        continue-on-error: false
        shell: bash
        run: |
          echo "$RDSK_PCH_SH_PRE" | base64 --decode > ./RDSK_PCH_SH_PRE.sh
          echo "$RDSK_PCH_SH" | base64 --decode > ./RDSK_PCH_SH.sh
          echo "$RDSK_PCH_HL" | base64 --decode > ./RDSK_PTCH_HL.txt
          echo prepatch 1 run
          bash ./RDSK_PCH_SH_PRE.sh
          echo Done prepatch 1
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            pwd
          fi

      - name: Apply patch 1
        # continue-on-error: true
        shell: bash
        env: 
          SED_EXE: ${{ env.SED_EXE }}
        run: |
          echo patch 1 run_1
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_2
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_3
          bash ./RDSK_PCH_SH.sh
          echo Done patch 1
          #cat ./libs/hbb_common/src/config.rs

      - name: Apply patch 4
        # continue-on-error: true
        shell: bash
        run: |
          echo patch 4
          rm ./RDSK_PCH_SH2.sh || true;
          echo "$RDSK_PCH_SH4" | base64 --decode > ./RDSK_PCH_SH2.sh
          bash ./RDSK_PCH_SH2.sh
          echo Done patch 4
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            pwd
          fi

      - name: Cleanup after patch
        continue-on-error: true
        shell: bash
        run: |
          echo "$RDSK_PCH_SH_CLN" | base64 --decode > ./RDSK_PCH_SH_CLN.sh
          bash ./RDSK_PCH_SH_CLN.sh

      - name: Set Swap Space
        uses: deep-soft/set-swap-space@master
        with:
          swap-size-gb: 12

      - name: Free Space
        run: |
          df -h
          free -m

      - name: Install Rust toolchain
        uses: deep-soft/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
          # override: true
          # profile: minimal # minimal component installation (ie, no documentation)

      - name: Save Rust toolchain version
        run: |
          RUST_TOOLCHAIN_VERSION=$(cargo --version | awk '{print $2}')
          echo "RUST_TOOLCHAIN_VERSION=$RUST_TOOLCHAIN_VERSION" >> $GITHUB_ENV

      - name: Disable rust bridge build
        run: |
          # only build cdylib
          sed -i  "s/\[\"cdylib\", \"staticlib\", \"rlib\"\]/\[\"cdylib\"\]/g" Cargo.toml

      - name: Restore bridge files
        uses: deep-soft/download-artifact@v4
        with:
          name: bridge-artifact
          path: ./

      - name: Setup vcpkg with Github Actions binary cache
        uses: deep-soft/run-vcpkg@v11
        with:
          vcpkgDirectory: /opt/artifacts/vcpkg
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}

      - name: Install vcpkg dependencies
        run: |
          # $VCPKG_ROOT/vcpkg install --x-install-root="$VCPKG_ROOT/installed"
          $VCPKG_ROOT/vcpkg install --triplet ${{ matrix.job.vcpkg-triplet }} --x-install-root="$VCPKG_ROOT/installed"
        shell: bash

      - uses: deep-soft/run-on-arch-action@amd64-support
        continue-on-error: true
        name: Build rustdesk for ${{ matrix.job.arch }}
        id: build_rustdesk
        with:
          arch: ${{ matrix.job.arch }}
          distro: ${{ matrix.job.distro }}
          githubToken: ${{ github.token }}
          setup: |
            ls -l "${PWD}"
            ls -l /opt/artifacts/vcpkg/installed
          dockerRunArgs: |
            --volume "${PWD}:/workspace"
            --volume "/opt/artifacts:/opt/artifacts"
          shell: /bin/bash
          install: |
            apt-get update -y
            echo -e "installing deps"
            apt-get install -y \
               clang \
               cmake \
               curl \
               gcc \
               git \
               g++ \
               libappindicator3-dev \
               libasound2-dev \
               libclang-10-dev \
               libclang-dev \
               libgstreamer1.0-dev \
               libgstreamer-plugins-base1.0-dev \
               libgtk-3-dev \
               libpam0g-dev \
               libpulse-dev \
               libva-dev \
               libvdpau-dev \
               libxcb-randr0-dev \
               libxcb-shape0-dev \
               libxcb-xfixes0-dev \
               libxdo-dev \
               libxfixes-dev \
               llvm-10-dev \
               llvm-dev \
               nasm \
               yasm \
               ninja-build \
               pkg-config \
               rpm \
               unzip \
               tree \
               wget
            # we have libopus compiled by us.
            apt-get remove -y libopus-dev || true
            # output devs
            ls -l ./
            tree -L 3 /opt/artifacts/vcpkg/installed
          run: |
            # disable git safe.directory
            git config --global --add safe.directory "*"

            # rust
            pushd /opt
            # do not use rustup, because memory overflow in qemu
            wget -O rust.tar.gz https://static.rust-lang.org/dist/rust-${{env.RUST_TOOLCHAIN_VERSION}}-${{ matrix.job.target }}.tar.gz
            tar -zxvf rust.tar.gz > /dev/null && rm rust.tar.gz
            cd rust-${{env.RUST_TOOLCHAIN_VERSION}}-${{ matrix.job.target }} && ./install.sh
            rm -rf rust-${{env.RUST_TOOLCHAIN_VERSION}}-${{ matrix.job.target }}

            # edit config
            mkdir -p ~/.cargo/
            echo """
              [source.crates-io]
              registry = 'https://github.com/rust-lang/crates.io-index'
            """ > ~/.cargo/config
            cat ~/.cargo/config

            # start build
            echo "##@## start build"
            pushd /workspace
            export VCPKG_ROOT=/opt/artifacts/vcpkg
            export JOBS=""
            echo $JOBS
            
            echo "##@## cargo build lib"
            # cargo build --lib --features hwcodec,flutter,flutter_texture_render,${{ matrix.job.extra-build-features }},$DEFAULT_FEAT --release
            cargo build --lib $JOBS --features hwcodec,flutter --release
            #rm -rf target/release/deps target/release/build
            #rm -rf ~/.cargo

            # setup flutter
            echo "##@## setup flutter"
            # Setup Flutter
            pushd /opt
            wget https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_${{ env.FLUTTER_VERSION }}-stable.tar.xz
            tar xf flutter_linux_${{ env.FLUTTER_VERSION }}-stable.tar.xz
            ls -l .
            export PATH=/opt/flutter/bin:$PATH
            flutter doctor -v

            # build flutter
            echo "##@## build flutter"
            pushd /workspace
            export CARGO_INCREMENTAL=0
            export DEB_ARCH=${{ matrix.job.deb_arch }}
            python3 ./build.py --flutter --skip-cargo
            ls -la
            mv "rustdesk-${{ env.VERSION }}.deb" rustdesk-${{ env.VERSION }}-${{ matrix.job.target }}-${{ matrix.job.os }}.deb

            echo "other packages: " ${{ inputs.other_packages }}
            if [[ "${{ inputs.other_packages }}" == "true" ]]; then
              # rpm package
              echo "##@## rpm package"
              pushd /workspace
              HBB=`pwd` rpmbuild ./res/rpm-flutter.spec -bb
              pushd ~/rpmbuild/RPMS/${{ matrix.job.arch }}
              mkdir -p /opt/artifacts/rpm
              for name in rustdesk*??.rpm; do
                  mv "$name" "/opt/artifacts/rpm/${name%%.rpm}.rpm"
              done

              # rpm suse package
              echo "##@## rpm suse package"
              pushd /workspace
              HBB=`pwd` rpmbuild ./res/rpm-flutter-suse.spec -bb
              pushd ~/rpmbuild/RPMS/${{ matrix.job.arch }}
              mkdir -p /opt/artifacts/rpm
              for name in rustdesk*??.rpm; do
                  mv "$name" "/opt/artifacts/rpm/${name%%.rpm}-suse.rpm"
              done
            fi

#      - name: Rename rustdesk
#        continue-on-error: true
#        shell: bash
#        run: |
#          for name in rustdesk*??.deb; do
#              # use cp to duplicate deb files to fit other packages.
#              cp "$name" "${name%%.deb}-${{ matrix.job.target }}-${{ matrix.job.os }}.deb"
#          done

      - name: Publish debian package
        continue-on-error: true
        uses: deep-soft/action-gh-release@v2.1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            rustdesk-${{ env.VERSION }}-${{ matrix.job.target }}-${{ matrix.job.os }}.deb

      - name: Publish fedora28/centos8 package
        if: ${{ inputs.other_packages == 'true' }}
        continue-on-error: true
        uses: deep-soft/action-gh-release@v2.1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            /opt/artifacts/rpm/*.rpm

      - name: Upload Artifact
        if: ${{ inputs.other_packages == 'true' }}
        continue-on-error: true
        uses: deep-soft/upload-artifact@v4
        with:
          name: rustdesk-${{ env.VERSION }}-${{ matrix.job.target }}-${{ matrix.job.os }}.deb
          path: rustdesk-${{ env.VERSION }}-${{ matrix.job.target }}-${{ matrix.job.os }}.deb

      # only x86_64 for arch since we can not find newest arm64 docker image to build
      # old arch image does not make sense for arch since it is "arch" which always update to date
      # and failed to makepkg arm64 on x86_64
      - name: Patch archlinux PKGBUILD
        if: ${{ inputs.other_packages == 'true' }}
        continue-on-error: true
        run: |
          sed -i "s/x86_64/${{ matrix.job.arch }}/g" res/PKGBUILD
          if [[ "${{ matrix.job.arch }}" == "aarch64" ]]; then
            sed -i "s/x86_64/aarch64/g" ./res/PKGBUILD
          fi

      - name: Build archlinux package
        if: ${{ inputs.other_packages == 'true' }}
        continue-on-error: true
        uses: deep-soft/arch-makepkg-action@master
        with:
          packages:
          scripts: |
            cd res && HBB=`pwd`/.. FLUTTER=1 makepkg -f

      - name: Publish archlinux package
        if: ${{ inputs.other_packages == 'true' }}
        continue-on-error: true
        uses: deep-soft/action-gh-release@v2.1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}
          #res/rustdesk*.zst
          files: |
            res/rustdesk-${{ env.VERSION }}*.zst
# ---
  build-appimage:
    name: Build appimage ${{ matrix.job.target }}${{ matrix.job.suffix }}
    if: ${{ inputs.other_packages == 'true' }}
    needs: [build-rustdesk-lib-linux-amd64]
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { arch: x86_64, target: x86_64-unknown-linux-gnu  , os: ubuntu-20.04, vcpkg-triplet: x64-linux , distro: ubuntu18.04, deb_arch: amd64, suffix: "", }
    steps:
      - name: Checkout source code
        uses: deep-soft/checkout@v4

## -- read from toml - begin
      - name: Read toml package.version
        uses: deep-soft/toml-action@v1.0.3
        id: read_toml_version
        with:
          file: 'Cargo.toml'
          field: 'package.version'

      - name: Set env.PROG_VERSION
        shell: bash
        run: |
          echo "PROG_VERSION = ${{ env.PROG_VERSION }}"

          echo "set PROG_VERSION with value from Cargo.toml"
          _version_=${{ steps.read_toml_version.outputs.value }}
          prog_version="v"$_version_

          echo "PROG_VERSION = $prog_version"
          echo "TAG_VERSION=${{ env.PROG_NAME }}-$prog_version"

          echo "set env.PROG_VERSION with value from Cargo.toml"
          echo "PROG_VERSION=$prog_version" >> $GITHUB_ENV
          echo "VERSION=$_version_" >> $GITHUB_ENV
          echo "TAG_VERSION=${{ env.PROG_NAME }}-$prog_version" >> $GITHUB_ENV

      - name: Print env.PROG_VERSION
        shell: bash
        run: |
          echo "show new value for env.PROG_VERSION"
          echo "PROG_VERSION = ${{ env.PROG_VERSION }}"
          echo "TAG_VERSION  = ${{ env.TAG_VERSION  }}"

## -- read from toml - end

# - get ref set build begin
      - name: Get ref, set build version
        shell: bash
        run: |
          _ref_all_=$(git log -1 --format='%H')
          # _ref_=$(echo ${_ref_all_::7})
          _date_=$(date +%Y%m%d)
          _ref_org_=${{ env.TAG_REF }}
          _ref_len_="${#_ref_org_}"
          _ref_=$(echo ${_ref_all_::$_ref_len_})
          echo "TAG_REF=$_ref_" >> $GITHUB_ENV
          _build_=${{ env.TAG_BUILD }}-$_date_-$_ref_
          echo "TAG_BUILD=$_build_" >> $GITHUB_ENV
          echo "WORK_DIR=$(pwd)" >> $GITHUB_ENV
          echo "TAG_DATE=$_date_" >> $GITHUB_ENV

      - name: Print ref, build version
        shell: bash
        run: |
          echo "REF: ${{ env.TAG_REF }}
          echo "BLD: ${{ env.TAG_BUILD }}
          echo "${{ env.TAG_NAME }}-${{ env.TAG_BUILD }}" > _tag_name_.txt
# - get ref set build end

      - name: Download Binary
        uses: deep-soft/download-artifact@v4
        with:
          name: rustdesk-${{ env.VERSION }}-${{ matrix.job.target }}-${{ matrix.job.os }}.deb
          path: .

      - name: Rename Binary
        run: |
          mv rustdesk-${{ env.VERSION }}-${{ matrix.job.target }}-${{ matrix.job.os }}.deb appimage/rustdesk.deb

      - name: Build appimage package
        #if: ${{ inputs.other_packages == 'true' }}
        continue-on-error: true
        shell: bash
        run: |
          # install libarchive-tools for bsdtar command used in AppImageBuilder.yml
          sudo apt-get update -y
          sudo apt-get install -y libarchive-tools
          # set-up appimage-builder
          pushd /tmp
          wget -O appimage-builder-x86_64.AppImage https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage
          chmod +x appimage-builder-x86_64.AppImage
          sudo mv appimage-builder-x86_64.AppImage /usr/local/bin/appimage-builder
          popd
          # run appimage-builder
          pushd appimage
          sudo appimage-builder --skip-tests --recipe ./AppImageBuilder-${{ matrix.job.arch }}.yml

      - name: Publish appimage package
        uses: deep-soft/action-gh-release@v2.1
        continue-on-error: true
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ./appimage/rustdesk-${{ env.VERSION }}-*.AppImage
## ---------
  build-flatpak:
    name: Build flatpak ${{ matrix.job.target }}${{ matrix.job.suffix }}
    if: ${{ inputs.other_packages == 'true' }}
    needs: [build-rustdesk-lib-linux-amd64]
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { arch: x86_64, target: x86_64-unknown-linux-gnu  , os: ubuntu-20.04, vcpkg-triplet: x64-linux , distro: ubuntu18.04, deb_arch: amd64, suffix: "", }
    steps:
      - name: Checkout source code
        uses: deep-soft/checkout@v4

## -- read from toml - begin
      - name: Read toml package.version
        uses: deep-soft/toml-action@v1.0.3
        id: read_toml_version
        with:
          file: 'Cargo.toml'
          field: 'package.version'

      - name: Set env.PROG_VERSION
        shell: bash
        run: |
          echo "PROG_VERSION = ${{ env.PROG_VERSION }}"

          echo "set PROG_VERSION with value from Cargo.toml"
          _version_=${{ steps.read_toml_version.outputs.value }}
          prog_version="v"$_version_

          echo "PROG_VERSION = $prog_version"
          echo "TAG_VERSION=${{ env.PROG_NAME }}-$prog_version"

          echo "set env.PROG_VERSION with value from Cargo.toml"
          echo "PROG_VERSION=$prog_version" >> $GITHUB_ENV
          echo "VERSION=$_version_" >> $GITHUB_ENV
          echo "TAG_VERSION=${{ env.PROG_NAME }}-$prog_version" >> $GITHUB_ENV

      - name: Print env.PROG_VERSION
        shell: bash
        run: |
          echo "show new value for env.PROG_VERSION"
          echo "PROG_VERSION = ${{ env.PROG_VERSION }}"
          echo "TAG_VERSION  = ${{ env.TAG_VERSION  }}"

## -- read from toml - end

# - get ref set build begin
      - name: Get ref, set build version
        shell: bash
        run: |
          _ref_all_=$(git log -1 --format='%H')
          # _ref_=$(echo ${_ref_all_::7})
          _date_=$(date +%Y%m%d)
          _ref_org_=${{ env.TAG_REF }}
          _ref_len_="${#_ref_org_}"
          _ref_=$(echo ${_ref_all_::$_ref_len_})
          echo "TAG_REF=$_ref_" >> $GITHUB_ENV
          _build_=${{ env.TAG_BUILD }}-$_date_-$_ref_
          echo "TAG_BUILD=$_build_" >> $GITHUB_ENV
          echo "WORK_DIR=$(pwd)" >> $GITHUB_ENV
          echo "TAG_DATE=$_date_" >> $GITHUB_ENV

      - name: Print ref, build version
        shell: bash
        run: |
          echo "REF: ${{ env.TAG_REF }}
          echo "BLD: ${{ env.TAG_BUILD }}
          echo "${{ env.TAG_NAME }}-${{ env.TAG_BUILD }}" > _tag_name_.txt
# - get ref set build end

      - name: Download Binary
        uses: deep-soft/download-artifact@v4
        with:
          name: rustdesk-${{ env.VERSION }}-${{ matrix.job.target }}-${{ matrix.job.os }}.deb
          path: .

      - name: Rename Binary
        run: |
          mv rustdesk-${{ env.VERSION }}-${{ matrix.job.target }}-${{ matrix.job.os }}.deb flatpak/rustdesk.deb

      - name: Build rustdesk flatpak package for ${{ matrix.job.arch }}
        uses: deep-soft/run-on-arch-action@amd64-support
        id: flatpak
        with:
          arch: ${{ matrix.job.arch }}
          distro: ${{ matrix.job.distro }}
          githubToken: ${{ github.token }}
          setup: |
            ls -l "${PWD}"
          dockerRunArgs: |
            --volume "${PWD}:/workspace"
          shell: /bin/bash
          install: |
            apt-get update -y
            apt-get install -y git flatpak flatpak-builder
          run: |
            # disable git safe.directory
            git config --global --add safe.directory "*"
            pushd /workspace
            # flatpak deps
            flatpak --user remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
            # package
            pushd flatpak
            git clone https://github.com/flathub/shared-modules.git --depth=1
            flatpak-builder --user --install-deps-from=flathub -y --force-clean --repo=repo ./build ./rustdesk.json
            flatpak build-bundle ./repo rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}${{ matrix.job.suffix }}.flatpak com.rustdesk.RustDesk

      - name: Publish flatpak package
        #if: ${{ inputs.other_packages == 'true' }}
        continue-on-error: true
        uses: deep-soft/action-gh-release@v2.1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            flatpak/rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}${{ matrix.job.suffix }}.flatpak

