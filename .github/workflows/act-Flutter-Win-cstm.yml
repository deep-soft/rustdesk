# 2023-05-06 09:30
#
#
name: act - Flutter - Win - cstm

on:
  workflow_call:
  workflow_dispatch:
#  schedule:
#    # schedule build every night
#    - cron: "0 0 * * *"

env:
  TAG_NAME: "Win-cstm"
  # To make a custom build with your own servers set the below secret values
  RS_PUB_KEY: '${{ secrets.RS_PUB_KEY }}'
  RENDEZVOUS_SERVER: '${{ secrets.RENDEZVOUS_SERVER }}'
  RDSK_PCH_SH_PRE: '${{ secrets.RDSK_PCH_SH_PRE }}'
  RDSK_PCH_SH: '${{ secrets.RDSK_PCH_SH }}'
  RDSK_PCH_HL: '${{ secrets.RDSK_PCH_HL }}'
  RDSK_PCH_SH2: '${{ secrets.RDSK_PCH_SH2 }}'
  RDSK_PCH_SH_CLN: '${{ secrets.RDSK_PCH_SH_CLN }}'
  DEBUG_LS: "yes"
  LLVM_VERSION: "15.0.6"
  FLUTTER_VERSION: "3.7.0"
  # vcpkg 2023.04.01 - msys2-runtime-3.4.6-1
  VCPKG_COMMIT_ID: "69efe9cc2df0015f0bb2d37d55acde4a75c9a25b"
  VERSION: "1.2.0"
  NDK_VERSION: "r23"
  #signing keys env variable checks
  ANDROID_SIGNING_KEY: '${{ secrets.ANDROID_SIGNING_KEY }}'
  #  signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
  #  alias: ${{ secrets.ANDROID_ALIAS }}
  #  keyStorePassword: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
  #  keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}  
  MACOS_P12_BASE64: '${{ secrets.MACOS_P12_BASE64 }}'

jobs:
  build-for-windows:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
#         - { target: i686-pc-windows-msvc        , os: windows-2022 }
#         - { target: x86_64-pc-windows-gnu       , os: windows-2022 }
          - { target: x86_64-pc-windows-msvc      , os: windows-2022 }
    steps:
      - name: Checkout source code
        uses: deep-soft/checkout@v3

      - name: Create source archive
        continue-on-error: true
        shell: bash
        run: |
          staging="rdsk-src-${{ env.VERSION }}-${{ matrix.job.target }}-${{ matrix.job.extra-build-features }}-${{ env.GUI }}"
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            7z a "$staging.zip" "*" -x!target/* -x!vcpkg/* > nul
            echo "ASSET_SRC=$staging.zip" >> $GITHUB_ENV
            if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
              echo "source archive name:"
              ls -l "$staging.zip"
            fi
          else
            touch "$staging.tar.xz"
            #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
            tar --exclude=*.tar* --exclude=target/*  --exclude=vcpkg/* -cv . | xz -9 > "$staging.tar.xz"
            echo "ASSET_SRC=$staging.tar.xz" >> $GITHUB_ENV
            if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
              echo "source archive name: "
              ls -l "$staging.tar.xz"
            fi
          fi
          #ls -l ${{ env.ASSET_SRC }} 

      - name: Prepare for patch 1
        continue-on-error: false
        shell: bash
        run: |
          echo "$RDSK_PCH_SH_PRE" | base64 --decode > ./RDSK_PCH_SH_PRE.sh
          echo "$RDSK_PCH_SH" | base64 --decode > ./RDSK_PCH_SH.sh
          echo "$RDSK_PCH_HL" | base64 --decode > ./RDSK_PTCH_HL.txt
          echo prepatch 1 run
          bash ./RDSK_PCH_SH_PRE.sh
          echo Done prepatch 1
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            pwd
          fi

      - name: Apply patch 1
        # continue-on-error: true
        shell: bash
        env: 
          SED_EXE: ${{ env.SED_EXE }}
        run: |
          echo patch 1 run_1
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_2
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_3
          bash ./RDSK_PCH_SH.sh
          echo Done patch 1
          #cat ./libs/hbb_common/src/config.rs

      - name: Prepare for patch 2
        continue-on-error: true
        shell: bash
        run: |
          echo "$RDSK_PCH_SH2" | base64 --decode > ./RDSK_PCH_SH2.sh
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            pwd
          fi

      - name: Apply patch 2
        # continue-on-error: true
        shell: bash
        run: |
          echo patch 2
          bash ./RDSK_PCH_SH2.sh
          echo Done patch 2
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            pwd
          fi

      - name: Apply patch 3
        # continue-on-error: true
        shell: bash
        run: |
          echo patch 3
          ./packfolder-windows.exe src/ui/ src/archived.rc -binary
          echo Done patch 3
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l src
            pwd
          fi

      - name: Cleanup after patch
        continue-on-error: true
        shell: bash
        run: |
          echo "$RDSK_PCH_SH_CLN" | base64 --decode > ./RDSK_PCH_SH_CLN.sh
          bash ./RDSK_PCH_SH_CLN.sh

      - name: Create source archive 1
        continue-on-error: true
        shell: bash
        run: |
          staging="rdsk-src1-${{ env.VERSION }}-${{ matrix.job.target }}-${{ matrix.job.extra-build-features }}-${{ env.GUI }}"
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            7z a "$staging.zip" "*" -x!target/* -x!vcpkg/* > nul
            echo "ASSET_SRC1=$staging.zip" >> $GITHUB_ENV
            if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
              echo "source archive name:"
              ls -l "$staging.zip"
            fi
          else
            touch "$staging.tar.xz"
            #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
            tar --exclude=*.tar* --exclude=target/*  --exclude=vcpkg/* -cv . | xz -9 > "$staging.tar.xz"
            echo "ASSET_SRC1=$staging.tar.xz" >> $GITHUB_ENV
            if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
              echo "source archive name: "
              ls -l "$staging.tar.xz"
            fi
          fi
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            ls -l ${{ env.ASSET_SRC }} 
            ls -l ${{ env.ASSET_SRC1 }} 
          fi

      - name: Publish src archives
        continue-on-error: true
        uses: deep-soft/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ${{ env.ASSET_SRC }}
            ${{ env.ASSET_SRC1 }}

      - name: Install LLVM and Clang
        uses: deep-soft/install-llvm-action@v1
        with:
          version: ${{ env.LLVM_VERSION }}

      - name: Install flutter
        uses: deep-soft/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Replace engine with rustdesk custom flutter engine
        run: |
          flutter doctor -v
          flutter precache --windows
          Invoke-WebRequest -Uri https://github.com/Kingtous/engine/releases/download/v3.7.0-rustdesk/windows-x64-release-flutter.zip -OutFile windows-x64-flutter-release.zip
          Expand-Archive windows-x64-flutter-release.zip -DestinationPath engine
          mv -Force engine/*  C:/hostedtoolcache/windows/flutter/stable-${{ env.FLUTTER_VERSION }}-x64/bin/cache/artifacts/engine/windows-x64-release/

      - name: Install Rust toolchain
        uses: deep-soft/rust-toolchain-actions-rs@v2
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
#          override: true
          profile: minimal # minimal component installation (ie, no documentation)

      - uses: deep-soft/rust-cache@v2
        with:
          prefix-key: ${{ matrix.job.os }}

      - name: Install flutter rust bridge deps
        run: |
          cargo install flutter_rust_bridge_codegen
          Push-Location flutter ; flutter pub get ; Pop-Location
          ~/.cargo/bin/flutter_rust_bridge_codegen --rust-input ./src/flutter_ffi.rs --dart-output ./flutter/lib/generated_bridge.dart

      - name: Restore from cache and install vcpkg
        uses: deep-soft/run-vcpkg@v10
        with:
#          setupOnly: true
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}

      - name: Install vcpkg dependencies
        run: |
          $VCPKG_ROOT/vcpkg install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static
        shell: bash

      - name: Build rustdesk
        continue-on-error: true
        run: python3 .\build.py --portable --hwcodec --flutter --feature IddDriver

      - name: Sign rustdesk files
        uses: deep-soft/code-sign-action@master
        with:
          certificate: '${{ secrets.WINDOWS_PFX_BASE64 }}'
          password: '${{ secrets.WINDOWS_PFX_PASSWORD }}'
          certificatesha1: '${{ secrets.WINDOWS_PFX_SHA1_THUMBPRINT }}'
          # certificatename: '${{ secrets.CERTNAME }}'
          folder: './flutter/build/windows/runner/Release/'
          recursive: true

      - name: Build self-extracted executable
        shell: bash
        run: |
          pushd ./libs/portable
          python3 ./generate.py -f ../../flutter/build/windows/runner/Release/ -o . -e ../../flutter/build/windows/runner/Release/rustdesk.exe
          popd
          mkdir -p ./SignOutput
          mv ./target/release/rustdesk-portable-packer.exe ./SignOutput/rustdesk-${{ env.VERSION }}-${{ matrix.job.target }}.exe

      # - name: Rename rustdesk
      #   shell: bash
      #   run: |
      #     for name in rustdesk*??-install.exe; do
      #         mv "$name" ./SignOutput/"${name%%-install.exe}-${{ matrix.job.target }}.exe"
      #     done

      - name: Sign rustdesk self-extracted file
        uses: deep-soft/code-sign-action@master
        with:
          certificate: '${{ secrets.WINDOWS_PFX_BASE64 }}'
          password: '${{ secrets.WINDOWS_PFX_PASSWORD }}'
          certificatesha1: '${{ secrets.WINDOWS_PFX_SHA1_THUMBPRINT }}'
          # certificatename: '${{ secrets.WINDOWS_PFX_NAME }}'
          folder: './SignOutput'
          recursive: false

      - name: Publish Release
        uses: deep-soft/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ./SignOutput/rustdesk-*.exe
            ${{ env.ASSET_SRC }}
            ${{ env.ASSET_SRC1 }}