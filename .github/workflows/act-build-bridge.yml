# act-build-bridge.yml
# 2024-12-16 22:30
# flutter 3.24.5, generate_bridge on linux
# progversion, no IDD, 
# changed: Replace engine with rustdesk custom flutter engine - default true (for win7)
# changed: Install Rust toolchain. uses: deep-soft/rust-toolchain@master
# windows-2022, sed-stuff, sha256 for self-extract
# runner.rc, change ProductVersion, Copyright 2024, vcpkg
name: act - Build flutter-rust-bridge

env:
  GUI:                         "Win-And-Lin-Mac-iOS"
  TAG_NAME:                    "Win-And-Lin-Mac-cstm"
  TAG_VERSION:                 "rdsk-v1.2.1"
  TAG_BUILD:                   "-b"
  TAG_REF:                     "0000000"
  PROG_NAME:                   "rdsk"
  PROG_VERSION:                "v1.0.0"
  VERSION:                     "1.0.0"
  DEBUG_LS:                    "yes"
  # To make a custom build with your own servers set the below secret values
  RS_PUB_KEY:                  '${{ secrets.RS_PUB_KEY        }}'
  RENDEZVOUS_SERVER:           '${{ secrets.RENDEZVOUS_SERVER }}'
  API_SERVER:                  '${{ secrets.API_SERVER        }}'
  RDSK_PCH_SH_PRE:             '${{ secrets.RDSK_PCH_SH_PRE   }}'
  RDSK_PCH_SH:                 '${{ secrets.RDSK_PCH_SH       }}'
  RDSK_PCH_HL:                 '${{ secrets.RDSK_PCH_HL       }}'
  RDSK_PCH_SH2:                '${{ secrets.RDSK_PCH_SH2      }}'
  RDSK_PCH_SH4:                '${{ secrets.RDSK_PCH_SH4      }}'
  RDSK_PCH_SH_CLN:             '${{ secrets.RDSK_PCH_SH_CLN   }}'
  RUST_VERSION:                "1.75" # was "rust-1.76.0"
  WIN_RUST_VERSION:            "1.75"
  LLVM_VERSION:                "15.0.6"
#  FLUTTER_VERSION:             "3.16.9"
#  FLUTTER_VERSION:             "3.19.6"
  BRIDGE_FLUTTER_VERSION:      "3.22.3" # flutter for bridge is "3.22.3"
  ANDROID_FLUTTER_VERSION:     "3.24.5"
  FLUTTER_VERSION:             "3.24.5" # bridge is "3.22.3"
  FLUTTER_RUST_BRIDGE_VERSION: "1.80.1"
  FLUTTER_ELINUX_VERSION:      "3.16.9"
  FLUTTER_ELINUX_COMMIT_ID:    "c02bd16e1630f5bd690b85c5c2456ac1920e25af"
  # vcpkg version: 2023.10.19
  # for multiarch gcc compatibility
  # VCPKG_COMMIT_ID:             "8eb57355a4ffb410a2e94c07b4dca2dffbee8e50"
  # vcpkg version: 2024.06.15
  # VCPKG_COMMIT_ID:             "f7423ee180c4b7f40d43402c2feb3859161ef625"
  # vcpkg version: 2024.07.12
  # VCPKG_COMMIT_ID:             "1de2026f28ead93ff1773e6e680387643e914ea1"
  # vcpkg version: 2024.11.16
  VCPKG_COMMIT_ID:             "b2cb0da531c2f1f740045bfe7c4dac59f0b2b69c"
  VCPKG_DIRECTORY:             "C:\\vcpkg"
  VCPKG_BINARY_SOURCES:        "clear;x-gha,readwrite"
  CARGO_NDK_VERSION:           "3.1.2"
  NDK_VERSION:                 "r27c" # was "r27"
  #signing keys env variable checks
  ANDROID_SIGNING_KEY:         '${{ secrets.ANDROID_SIGNING_KEY }}'
  #  signingKeyBase64:         '${{ secrets.ANDROID_SIGNING_KEY }}'
  #  alias:                    '${{ secrets.ANDROID_ALIAS }}'
  #  keyStorePassword:         '${{ secrets.ANDROID_KEY_STORE_PASSWORD }}'
  #  keyPassword:              '${{ secrets.ANDROID_KEY_PASSWORD }}'
  MACOS_P12_BASE64:            '${{ secrets.MACOS_P12_BASE64 }}'
  cargo_clippy_log:            "cargo-clippy.log"

on:
#  schedule:
#    # schedule build every night
#    - cron: "0 0 * * *"
  workflow_call:
  workflow_dispatch:

jobs:
   generate-bridge-linux:
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-20.04, extra-build-args: "",            }
    steps:
#      - name: Export GitHub Actions cache environment variables
#        uses: actions/github-script@v6
#        with:
#          script: |
#            core.exportVariable('ACTIONS_CACHE_URL',     process.env.ACTIONS_CACHE_URL     || '');
#            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Checkout source code
        uses: deep-soft/checkout@v4
        with:
          submodules: recursive

## -- read from toml - begin
      - name: Read toml package.version
        uses: deep-soft/toml-action@v1.0.3
        id: read_toml_version
        with:
          file: 'Cargo.toml'
          field: 'package.version'

      - name: Set env.PROG_VERSION
        shell: bash
        run: |
          echo "PROG_VERSION = ${{ env.PROG_VERSION }}"

          echo "set PROG_VERSION with value from Cargo.toml"
          _version_=${{ steps.read_toml_version.outputs.value }}
          prog_version="v"$_version_

          echo "PROG_VERSION = $prog_version"
          echo "TAG_VERSION=${{ env.PROG_NAME }}-$prog_version"

          echo "set env.PROG_VERSION with value from Cargo.toml"
          echo "PROG_VERSION=$prog_version" >> $GITHUB_ENV
          echo "VERSION=$_version_" >> $GITHUB_ENV
          echo "TAG_VERSION=${{ env.PROG_NAME }}-$prog_version" >> $GITHUB_ENV

      - name: Print env.PROG_VERSION
        shell: bash
        run: |
          echo "show new value for env.PROG_VERSION"
          echo "PROG_VERSION = ${{ env.PROG_VERSION }}"
          echo "TAG_VERSION  = ${{ env.TAG_VERSION  }}"

## -- read from toml - end

# - get ref set build begin
      - name: Get ref, set build version
        shell: bash
        run: |
          _ref_all_=$(git log -1 --format='%H')
          # _ref_=$(echo ${_ref_all_::7})
          _date_=$(date +%Y%m%d)
          _ref_org_=${{ env.TAG_REF }}
          _ref_len_="${#_ref_org_}"
          _ref_=$(echo ${_ref_all_::$_ref_len_})
          echo "TAG_REF=$_ref_" >> $GITHUB_ENV
          _build_=${{ env.TAG_BUILD }}-$_date_-$_ref_
          echo "TAG_BUILD=$_build_" >> $GITHUB_ENV
          echo "WORK_DIR=$(pwd)" >> $GITHUB_ENV
          echo "TAG_DATE=$_date_" >> $GITHUB_ENV

      - name: Print ref, build version
        shell: bash
        run: |
          echo "REF: ${{ env.TAG_REF }}
          echo "BLD: ${{ env.TAG_BUILD }}
          echo "${{ env.TAG_NAME }}-${{ env.TAG_BUILD }}" > _tag_name_.txt

      - name: Create source archive
        continue-on-error: true
        shell: bash
        run: |
          staging="rdsk-src-${{ env.VERSION }}-${{ matrix.job.target }}-${{ matrix.job.extra-build-features }}-${{ env.GUI }}"
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            7z a "$staging.zip" "*" -x!target/* -x!vcpkg/* > nul
            echo "ASSET_SRC=$staging.zip" >> $GITHUB_ENV
            if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
              echo "source archive name:"
              ls -l "$staging.zip"
            fi
          else
            touch "$staging.tar.xz"
            #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
            tar --exclude=*.tar* --exclude=target/*  --exclude=vcpkg/* -cv . | xz -9 > "$staging.tar.xz"
            echo "ASSET_SRC=$staging.tar.xz" >> $GITHUB_ENV
            if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
              echo "source archive name: "
              ls -l "$staging.tar.xz"
            fi
          fi
          #ls -l ${{ env.ASSET_SRC }} 

      - name: Prepare for patch 1
        continue-on-error: false
        shell: bash
        run: |
          echo "$RDSK_PCH_SH_PRE" | base64 --decode > ./RDSK_PCH_SH_PRE.sh
          echo "$RDSK_PCH_SH" | base64 --decode > ./RDSK_PCH_SH.sh
          echo "$RDSK_PCH_HL" | base64 --decode > ./RDSK_PTCH_HL.txt
          echo prepatch 1 run
          bash ./RDSK_PCH_SH_PRE.sh
          echo Done prepatch 1
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            pwd
          fi

      - name: Apply patch 1
        # continue-on-error: true
        shell: bash
        env: 
          SED_EXE: ${{ env.SED_EXE }}
        run: |
          echo patch 1 run_1
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_2
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_3
          bash ./RDSK_PCH_SH.sh
          echo Done patch 1
          #cat ./libs/hbb_common/src/config.rs

      - name: Apply patch 4
        # continue-on-error: true
        shell: bash
        run: |
          echo patch 4
          rm ./RDSK_PCH_SH2.sh || true;
          echo "$RDSK_PCH_SH4" | base64 --decode > ./RDSK_PCH_SH2.sh
          bash ./RDSK_PCH_SH2.sh
          echo Done patch 4
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            pwd
          fi

      - name: Cleanup after patch
        continue-on-error: true
        shell: bash
        run: |
          echo "$RDSK_PCH_SH_CLN" | base64 --decode > ./RDSK_PCH_SH_CLN.sh
          bash ./RDSK_PCH_SH_CLN.sh

      - name: Create source archive 1
        continue-on-error: true
        shell: bash
        run: |
          staging="rdsk-src1-${{ env.VERSION }}-${{ matrix.job.target }}-${{ matrix.job.extra-build-features }}-${{ env.GUI }}"
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            7z a "$staging.zip" "*" -x!target/* -x!vcpkg/* > nul
            echo "ASSET_SRC1=$staging.zip" >> $GITHUB_ENV
            if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
              echo "source archive name:"
              ls -l "$staging.zip"
            fi
          else
            touch "$staging.tar.xz"
            #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
            tar --exclude=*.tar* --exclude=target/*  --exclude=vcpkg/* -cv . | xz -9 > "$staging.tar.xz"
            echo "ASSET_SRC1=$staging.tar.xz" >> $GITHUB_ENV
            if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
              echo "source archive name: "
              ls -l "$staging.tar.xz"
            fi
          fi
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            ls -l ${{ env.ASSET_SRC }} 
            ls -l ${{ env.ASSET_SRC1 }} 
          fi

      - name: Install prerequisites
        run: |
          sudo apt-get install ca-certificates -y
          sudo apt-get update -y
          sudo apt-get install -y \
            clang \
            cmake \
            curl \
            gcc \
            git \
            g++ \
            libclang-10-dev \
            libclang-dev \
            libgtk-3-dev \
            llvm-10-dev \
            llvm-dev \
            nasm \
            ninja-build \
            pkg-config \
            wget \
            yasm

      - name: Install Rust toolchain
        uses: deep-soft/rust-toolchain@master
        with:
          # toolchain: stable
          # target: ${{ matrix.job.target }}
          #override: true
          #profile: minimal # minimal component installation (ie, no documentation)
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.job.target }}
          components: "rustfmt"

      - uses: deep-soft/rust-cache@v2
        with:
          prefix-key: bridge-${{ matrix.job.os }}

      - name: Cache Bridge
        id: cache-bridge
        uses: deep-soft/cache@v4
        with:
          path: /tmp/flutter_rust_bridge
          key: vcpkg-${{ matrix.job.arch }}

      - name: Install flutter
        uses: deep-soft/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.BRIDGE_FLUTTER_VERSION }}
          cache: true

      - name: Install flutter rust bridge deps
        shell: bash
        run: |
          cargo install flutter_rust_bridge_codegen --version ${{ env.FLUTTER_RUST_BRIDGE_VERSION }} --features "uuid" --locked
          pushd flutter && sed -i -e 's/extended_text: 14.0.0/extended_text: 13.0.0/g' pubspec.yaml && flutter pub get && popd

      - name: Run flutter rust bridge
        run: |
          ~/.cargo/bin/flutter_rust_bridge_codegen --rust-input ./src/flutter_ffi.rs --dart-output ./flutter/lib/generated_bridge.dart --c-output ./flutter/macos/Runner/bridge_generated.h
          cp ./flutter/macos/Runner/bridge_generated.h ./flutter/ios/Runner/bridge_generated.h

      - name: Upload Artifact
        uses: deep-soft/upload-artifact@v4
        with:
          name: bridge-artifact
          path: |
            ./src/bridge_generated.rs
            ./src/bridge_generated.io.rs
            ./flutter/lib/generated_bridge.dart
            ./flutter/lib/generated_bridge.freezed.dart
            ./flutter/macos/Runner/bridge_generated.h
            ./flutter/ios/Runner/bridge_generated.h
